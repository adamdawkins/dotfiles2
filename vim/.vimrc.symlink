set nocompatible              " be iMproved, required
filetype off                  " required

" PLUGINS
" set the runtime path to inclued Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Vim defaults everyone can agree on
Plugin 'tpope/vim-sensible'

" Ctrl P
Plugin 'kien/ctrlp.vim'

" EDITOR
" Vim motions on speed!
Plugin 'easymotion/vim-easymotion'

" Select ruby blocks
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'

" Surround
Plugin 'tpope/vim-surround'

" useful pairs of mappings
Plugin 'tpope/vim-unimpaired'

" Better matching
Plugin 'adelarsq/vim-matchit'

" Comments
Plugin 'tpope/vim-commentary'

" " GIT
Plugin 'tpope/vim-fugitive'

" SYNTAXES
"      HTML
Plugin 'othree/html5.vim'
"      Javascript
Plugin 'pangloss/vim-javascript'
"      Ruby
Plugin 'despo/vim-ruby-refactoring'
Plugin 'vim-ruby/vim-ruby'

""     TOOLS
Plugin 'AndrewRadev/splitjoin.vim' " Switch between single-line and multiline forms of code
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-abolish' " Working with words

" Syntax Checking
Plugin 'dense-analysis/ale'

" COLOR SCHEMES
Plugin 'jonathanfilip/vim-lucius'

call vundle#end()

filetype plugin indent on


" END PLUGINS

" Key mappings
let mapleader=',' " map leader to comma
let maplocalleader='\'


let g:vim_markdown_folding_disabled = 1

" map spacebar to :
nmap <Space> :

" map ,. to switch between test/production
nmap <leader>. :A<cr>

nmap <silent> <leader>an :ALENext<cr>
nmap <silent> <leader>ap :ALEPrevious<cr>

" ctrl p for current buffers
map <leader>b :CtrlPBuffer<cr>

"splits commas on current line onto new lines
map <leader>cs :s/,/,\r/g<cr>

" Replace creates with builds in specs
map <leader>cb :%s/create(/build(/gc<cr>

map <leader>d :ALEDetail<cr>

map <leader>lb :set linebreak<cr>

" Ruby refactoring shortcuts
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>rn :call RenameFile()<cr>


map <leader>m :call MkDir()<cr>
map <leader>n :bn<cr>

map <leader>o :!open %<cr>

" Open CtrlP
map <leader>p :CtrlP<cr>

" open relative file
map <leader>r :R<cr>

" <leader>T mapped by Testing (line #204)


" tags
nmap <leader>f <C-]><cr>

nnoremap <leader>v :call SelectaFile(expand('%:h'), "*", ":view")<cr>

" Open ~/.vimrc
map <leader>vi :e ~/.vimrc<cr>


command Noswaps execute "!rm %:h/.%:t.sw*"

map <C-l> <C-w><C-l>
map <C-h> <C-w><C-h>
map <C-j> <C-w><C-j>
map <C-k> <C-w><C-k>

" ignore some stuff always
set wildignore=**/node_modules?**,**/tmp/**,**/vendor/bundle/**,**/fixtures/vcr_cassettes/**/*,**/coverage/**,**/build/**,**/public/packs/**,**/public/packs-test/**,**/elm-stuff/**,**/dist**,_site/**

" ALE Syntax checker setup
" "
let g:ale_javascript_prettier_use_global = 0
let g:ale_ruby_rubocop_executable = 'bundle'

let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'ruby': ['rubocop']
            \}

let g:ale_linters = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'ruby': ['rubocop'],
            \   'scss': [],
            \   'css': [],
            \}

let g:ale_fix_on_save = 1
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0

" let g:prettier#autoformat = 0
" let g:prettier#autoformat_require_pragma = 0

set omnifunc=syntaxcomplete#Complete

" let g:elm_setup_keybindings = 0
" let g:elm_format_autosave = 1


let g:rails_projections = {
      \ "app/services/operations/*.rb": {
      \   "command": "operation",
      \ },
      \ "app/services/pages/*.rb": {
      \ "command": "page",
      \ "test": [
      \  "spec/services/pages/{}_spec.rb"
      \ ],
      \ },
      \ "app/controllers/*_controller.rb": {
      \   "test": [
      \     "spec/controllers/{}_controller_spec.rb",
      \     "spec/requests/{}_spec.rb"
      \   ],
      \ },
      \ "spec/requests/*_spec.rb": {
      \   "alternate": [
      \     "app/controllers/{}_controller.rb"
      \   ],
      \ },
      \ "app/components/*.html.erb": {
      \   "alternate": [
      \     "spec/components/{}_spec.rb",
      \     "app/components/{}.rb",
      \   ],
      \ },
      \ "app/components/*.rb": {
      \   "command": "component",
      \   "alternate": [
      \     "app/components/{}.html.erb",
      \     "spec/components/{}_spec.rb",
      \   ]
      \ }}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FindConditionals COMMAND
" Start a search for conditional branches, both implicit and explicit
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! FindConditionals :normal /\<if\>\|\<unless\>\|\<and\>\|\<or\>\|||\|&&<cr>

" CTRL-P Setup
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multiple_files = 'r'
let g:ctrlp_match_window = 'top,order:btt,min:1,max:10,results:10'

" let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1
let g:ruby_indent_assignment_style = 'variable'


" Ruby setup
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1

" window and buffery stuff

" Allow new buffers to open with unsaved buffers behind
set hidden

" search settings
set ignorecase
set smartcase " searches case insensitive with lower-case letters, but sensitive with uppercase

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" set winwidth=104 " the 100 + some space for the line numbers and linting bar  ¯\_(ツ)_/¯
"set winheight=30


" make directory for current file
function MkDir()
    exe '!mkdir -p %:h'
endfunction

""" TESTING (from https://github.com/garybernhardt/dotfiles/blob/master/.vimrc)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
"
" Test running here is contextual in two different ways:
"
" 1. It will guess at how to run the tests. E.g., if there's a Gemfile
"    present, it will `bundle exec rails test` so the gems are respected.
"
" 2. It remembers which tests have been run. E.g., if I'm editing user_spec.rb
"    and hit enter, it will run rails test on user_spec.rb. If I then navigate to a
"    non-test file, like routes.rb, and hit return again, it will re-run
"    user_spec.rb. It will continue using user_spec.rb as my 'default' test
"    until I hit enter in some other test file, at which point that test file
"    is run immediately and becomes the default. This is complex to describe
"    fully, but simple to use in practice: always hit enter to run tests. It
"    will run either the test file you're in or the last test file you hit
"    enter in.
"
" 3. Sometimes you want to run just one test. For that, there's <leader>T,
"    which passes the current line number to the test runner. rails test knows what
"    to do with this (it will run the first test it finds at or below the
"    given line number). It probably won't work with other test runners.
"    'Focusing' on a single test in this way will be remembered if you hit
"    enter from non-test files, as described above.
"
" 4. Sometimes you don't want contextual test running. In that case, there's
"    <leader>a, which runs everything.
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! MapCR()
    nnoremap <cr> :call RunTestFile()<cr>
endfunction
call MapCR()
nnoremap <leader>T :call RunNearestTest()<cr>
nnoremap <leader>a :call RunTests('')<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Are we in a test file?
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\|test_.*\.py\|_test.py\|Test.hs\|*.test.js\)$') != -1

    " Run the tests for the previously-marked file (or the current file if
    " it's a test).
    if in_test_file
        call SetTestFile(command_suffix)
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

function! SetTestFile(command_suffix)
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@% . a:command_suffix
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    if expand("%") != ""
        :w
    end
    " The file is executable; assume we should run
    if executable(a:filename)
        exec ":call Fifo('./')" . a:filename
        " Project-specific test script
    elseif filereadable("bin/test")
        exec ":call Fifo('bin/test " . a:filename . "')"
        " rails test binstub
    elseif filereadable("bin/rails test")
        exec ":call Fifo('bundle exec rails test --format documentation --fail-fast " . a:filename . "')"
    elseif filereadable("script/cucumber")
        exec ":call Fifo('bundle exec script/cucumber " . a:filename . "')"
        " Fall back to the .test-commands pipe if available, assuming someone
        " is reading the other side and running the commands
    elseif filewritable(".test-commands")
        let cmd = 'bundle exec rails test --color --format documentation --require "~/lib/vim_rails test_formatter" --format VimFormatter --fail-fast --out tmp/quickfix'
        exec ":!echo " . cmd . " " . a:filename . " > .test-commands"

        " Write an empty string to block until the command completes
        sleep 100m " milliseconds
        :!echo > .test-commands
        redraw!
        " Fall back to a blocking test run with Bundler
    elseif filereadable("bin/rails test")
        exec ":call Fifo('bin/rails test --color --format documentation --fail-fast " . a:filename . "')"
    elseif filereadable("Gemfile") && strlen(glob("spec/**/*.rb"))
        exec ":call Fifo('bundle exec rails test --format documentation --color --fail-fast " . a:filename . "')"
    elseif filereadable("Gemfile") && strlen(glob("test/**/*.rb"))
        exec ":call Fifo('ruby " . a:filename . "')"
    end
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Selecta Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Run a given vim command on the results of fuzzy selecting from a given
" shell command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)
    try
        let selection = system(a:choice_command . " | selecta " .  a:selecta_args)
        " Escape spaces in the file name. That ensures that it's a
        " single argument
        " when concatenated with vim_command and run with exec.
        let selection = substitute(selection, ' ', '\\ ', "g")
    catch /Vim:Interrupt/
        " Swallow the ^C so that the redraw below happens; otherwise there will be
        " leftovers from selecta on the screen
        redraw!
        return
    endtry
    redraw!
    exec a:vim_command . " " .  selection
endfunction

function! SelectaFile(path, glob, command)
    call SelectaCommand("find " . a:path . "/* -type f -and -not -path '*/node_modules/*' -and -not -path '*/_build/*' -and -not -path '*/build/*' -and -iname '" . a:glob . "' -and -not -iname '*.pyc' -and -not -ipath '*/tmp/*' -and -not -ipath '*/.meteor/*' -and -not -iname '*.png' -and -not -iname '*.jpg' -and -not -iname '*.eps' -and -not -iname '*.pdf' -and -not -iname '*.svg' -and -not -iname '*.ttf'", "", a:command)
endfunction

augroup vimrcEx
    " Clear all autocmds in the group
    autocmd!
    " autocmd FileType text setlocal textwidth=78
    " Jump to last cursor position unless it's invalid or in an event handler
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

    "for ruby, autoindent with two spaces, always expand tabs
    autocmd FileType ruby,haml,eruby,yaml,html,sass,cucumber set ai sw=2 sts=2 et
    autocmd FileType python set sw=4 sts=4 et
    autocmd FileType elm set ai sw=4 sts=4 et
    autocmd FileType elm set cursorline cursorcolumn
    autocmd FileType elm set cc=80

    autocmd! BufRead,BufNewFile *.sass setfiletype sass
    " autocmd BufRead,BufNewFile *.erb set filetype=html

    " autocmd BufRead *.md  set ai formatoptions=tcroqn2 comments=n:&gt;
    " autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

    autocmd FileType html,eruby let g:html_indent_tags .= '\|p\|li\|dt\|dd\|article\|section'


    " " Don't syntax highlight markdown because it's often wrong
    " autocmd! FileType mkd setlocal syn=off

    " Leave the return key alone when in command line windows, since it's used
    " to run commands there.
    autocmd! CmdwinEnter * :unmap <cr>
    autocmd! BufReadPost quickfix nnoremap <CR> <CR>
    autocmd! CmdwinLeave * :call MapCR()

    " " *.md is markdown
    " autocmd! BufNewFile,BufRead *.md setlocal ft=

    " indent slim two spaces, not four
    autocmd! FileType slim set sw=2 sts=2 et
augroup END


map <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! bundle exec rails -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>

function! Fifo(cmd)
  :silent! exe '!echo "clear; cd ' . getcwd() . ' && ' . a:cmd . '" > /tmp/cmds'
  :redraw!
endfunction


" editor settings
set shiftwidth=2
set tabstop=2
set expandtab

set number

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
" keep more context when scrolling off the end of a buffer
set scrolloff=3

set showtabline=2

" au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm, *.njk set ft=jinja

" close fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
" Fugitive Conflict Resolution
nnoremap <leader>dg :Gvdiffsplit!<CR>
nnoremap gdh :diffget //2<CR>
nnoremap gdl :diffget //3<CR>


" " Haskell soft tabs
" autocmd Filetype hs setlocal ts=2 sw=2 expandtab
" autocmd Filetype cabal setlocal ts=2 sw=2 expandtab

" " Turn off folds in Markdown files
" au FileType markdown setlocal nofoldenable
"

set nocompatible
if has("autocmd")
    filetype indent plugin on
endif

:set tags=tags
:set tags^=./.git/tags;

:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
:set diffopt=vertical

:set showtabline=0
:set nowrap

" COLORS

:set t_Co=256
:set cursorline
:set cursorcolumn
:set colorcolumn=120

colorscheme lucius
let iterm_profile = $ITERM_PROFILE

if iterm_profile == "Dark"
    set background=dark
else
    set background=light
endif
